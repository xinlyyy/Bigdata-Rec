train_input_path: "examples/data/movielens_1m/movies_train_data"
eval_input_path: "examples/data/movielens_1m/movies_test_data"
model_dir: "examples/ckpt/contrastive_on_movieslen"

train_config {
  log_step_count_steps: 100
  optimizer_config: {
    adam_optimizer: {
      learning_rate: {
        exponential_decay_learning_rate {
          initial_learning_rate: 0.001
          decay_steps: 1000
          decay_factor: 0.5
          min_learning_rate: 0.00001
        }
      }
    }
    use_moving_average: false
  }
  save_checkpoints_steps: 2000
  sync_replicas: True
}

eval_config {
  metrics_set: {
    auc {}
  }
  metrics_set: {
    gauc {
      uid_field: 'user_id'
    }
  }
  metrics_set: {
    max_f1 {}
  }
}

data_config {
  input_fields {
    input_name:'label'
    input_type: INT32
  }
  input_fields {
    input_name:'user_id'
    input_type: INT32
  }
  input_fields {
    input_name: 'movie_id'
    input_type: INT32
  }
  input_fields {
    input_name:'rating'
    input_type: INT32
  }
  input_fields {
    input_name: 'gender'
    input_type: INT32
  }
  input_fields {
    input_name: 'age'
    input_type: INT32
  }
  input_fields {
    input_name: 'job_id'
    input_type: INT32
  }
  input_fields {
    input_name: 'zip_id'
    input_type: STRING
  }
  input_fields {
    input_name: 'title'
    input_type: STRING
  }
  input_fields {
    input_name: 'genres'
    input_type: STRING
  }
  input_fields {
    input_name: 'year'
    input_type: INT32
  }

  label_fields: 'label'
  batch_size: 1024
  num_epochs: 1
  prefetch_size: 32
  input_type: CSVInput
  separator: '\t'
}

feature_config: {
  features: {
    input_names: 'user_id'
    feature_type: IdFeature
    embedding_dim: 16
    hash_bucket_size: 12000
  }
  features: {
    input_names: 'movie_id'
    feature_type: IdFeature
    embedding_dim: 16
    hash_bucket_size: 6000
  }
  features: {
    input_names: 'gender'
    feature_type: IdFeature
    embedding_dim: 16
    num_buckets: 2
  }
  features: {
    input_names: 'job_id'
    feature_type: IdFeature
    embedding_dim: 16
    num_buckets: 21
  }
  features: {
    input_names: 'age'
    feature_type: IdFeature
    embedding_dim: 16
    num_buckets: 7
  }
  features: {
    input_names: 'genres'
    feature_type: TagFeature
    separator: '|'
    embedding_dim: 16
    hash_bucket_size: 100
  }
  features: {
    input_names: 'title'
    feature_type: SequenceFeature
    separator: ' '
    embedding_dim: 16
    hash_bucket_size: 10000
    sequence_combiner: {
      text_cnn: {
        filter_sizes: [2, 3, 4]
        num_filters: [16, 8, 8]
        pad_sequence_length: 14
      }
    }
  }
  features: {
    input_names: 'year'
    feature_type: IdFeature
    embedding_dim: 16
    num_buckets: 36
  }
}
model_config: {
  model_name: "multi tower"
  model_class: "RankModel"
  feature_groups: {
    group_name: 'user'
    feature_names: 'user_id'
    feature_names: 'job_id'
    feature_names: 'age'
    feature_names: 'gender'
    wide_deep: DEEP
  }
  feature_groups: {
    group_name: 'item'
    feature_names: 'movie_id'
    feature_names: 'year'
    feature_names: 'genres'
    wide_deep: DEEP
  }
  backbone {
    blocks {
      name: 'user_tower'
      inputs {
        feature_group_name: 'user'
      }
      keras_layer {
        class_name: 'MLP'
        mlp {
          hidden_units: [256, 128]
        }
      }
    }
    packages {
      name: 'item_tower'
      blocks {
        name: 'item'
        inputs {
          feature_group_name: 'item'
        }
        input_layer {
          dropout_rate: 0.1
        }
      }
      blocks {
        name: 'item_encoder'
        inputs {
          block_name: 'item'
        }
        keras_layer {
          class_name: 'MLP'
          mlp {
            hidden_units: [256, 128]
          }
        }
      }
    }
    blocks {
      name: 'contrastive_learning'
      inputs {
        package_name: 'item_tower'
      }
      inputs {
        package_name: 'item_tower'
      }
      merge_inputs_into_list: true
      keras_layer {
        class_name: 'AuxiliaryLoss'
        st_params {
          fields {
            key: 'loss_type'
            value: { string_value: 'info_nce' }
          }
          fields {
            key: 'loss_weight'
            value: { number_value: 0.1 }
          }
          fields {
            key: 'temperature'
            value: { number_value: 0.2 }
          }
        }
      }
    }
    blocks {
      name: 'top_mlp'
      inputs {
        block_name: 'contrastive_learning'
        ignore_input: true
      }
      inputs {
        block_name: 'user_tower'
      }
      inputs {
        package_name: 'item_tower'
        reset_input {
        }
      }
      keras_layer {
        class_name: 'MLP'
        mlp {
          hidden_units: [128, 64]
        }
      }
    }
    concat_blocks: 'top_mlp'
  }
  model_params {
    l2_regularization: 1e-4
  }
  embedding_regularization: 1e-4
}
