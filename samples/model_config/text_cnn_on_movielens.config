train_input_path: "data/test/movielens_1m/ml_train_data"
eval_input_path: "data/test/movielens_1m/ml_test_data"
model_dir: "experiments/text_cnn_movielens_ckpt"

train_config {
  optimizer_config: {
    adam_optimizer: {
      learning_rate: {
        constant_learning_rate {
          learning_rate: 0.0001
        }
      }
      beta1: 0.9
      beta2: 0.999
    }
    use_moving_average: false
  }
  log_step_count_steps: 100
  save_checkpoints_steps: 100
  sync_replicas: true
  num_steps: 100
}

eval_config {
  metrics_set: {
    gauc {
      uid_field: 'user_id'
    }
  }
  metrics_set: {
    auc {}
  }
  metrics_set: {
    max_f1 {}
  }
}

data_config {
  input_fields {
    input_name:'rating'
    input_type: INT32
  }
  input_fields {
    input_name:'label'
    input_type: INT32
  }
  input_fields {
    input_name:'user_id'
    input_type: INT32
  }
  input_fields {
    input_name:'movie_id'
    input_type: INT32
  }
  input_fields {
    input_name:'gender'
    input_type: INT32
  }
  input_fields {
    input_name: 'age'
    input_type: INT32
  }
  input_fields {
    input_name: 'occupation'
    input_type: INT32
  }
  input_fields {
    input_name: 'zip_id'
    input_type: INT32
    default_val: '0'
  }
  input_fields {
    input_name: 'genres'
    input_type: STRING
    default_val: 'unknown'
  }
  input_fields {
    input_name: 'title'
    input_type: STRING
    default_val: 'unknown'
  }
  input_fields {
    input_name: 'movie_year_bin'
    input_type: INT32
  }
  input_fields {
    input_name: 'score_year_diff'
    input_type: INT32
    default_val: '0'
  }
  input_fields {
    input_name: 'score_time'
    input_type: DOUBLE
  }
  input_fields {
    input_name: 'embedding'
    input_type: STRING
    default_val: ''
  }

  label_fields: 'label'
  batch_size: 128
  num_epochs: 10000
  prefetch_size: 1
  input_type: CSVInput
}

feature_config: {
  features: {
    input_names: 'title'
    feature_type: SequenceFeature
    separator: ' '
    embedding_dim: 16
    hash_bucket_size: 20000
  }
}
model_config: {
  model_name: 'TextCNN'
  model_class: 'RankModel'
  feature_groups: {
    group_name: 'text_seq'
    feature_names: 'title'
    wide_deep: DEEP
  }
  backbone {
    blocks {
      name: 'text_seq'
      inputs {
        feature_group_name: 'text_seq'
      }
      input_layer {
        output_seq_and_normal_feature: true
      }
    }
    blocks {
      name: 'textcnn'
      inputs {
        block_name: 'text_seq'
      }
      keras_layer {
        class_name: 'TextCNN'
        text_cnn {
          filter_sizes: [2, 3, 4]
          num_filters: [16, 8, 8]
          pad_sequence_length: 14
          mlp {
            hidden_units: [256, 128, 64]
          }
        }
      }
    }
  }
  model_params {
    l2_regularization: 1e-6
  }
  embedding_regularization: 1e-6
}
export_config {
  exporter_type: "best"
  best_exporter_metric: "gauc"
  exports_to_keep: 1
}
